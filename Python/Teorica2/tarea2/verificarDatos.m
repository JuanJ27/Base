% Script de verificaci√≥n y carga de datos - Trompo Landau
% Verificar que los datos se cargan correctamente desde Python

clear all; close all; clc;

fprintf('=== VERIFICACI√ìN DE DATOS DEL TROMPO ===\n\n');

%% 1. Cargar y verificar datos
try
    load('dataTrompo.mat');
    fprintf('‚úì Archivo dataTrompo.mat cargado exitosamente\n');
catch ME
    fprintf('‚ùå Error cargando dataTrompo.mat:\n');
    fprintf('   %s\n', ME.message);
    fprintf('   Aseg√∫rate de ejecutar el notebook Python primero.\n');
    return;
end

%% 2. Mostrar informaci√≥n de los datos
fprintf('\n--- INFORMACI√ìN DE LOS DATOS ---\n');
fprintf('Trompo Sim√©trico:\n');
fprintf('  ‚Ä¢ Puntos temporales: %d\n', length(t));
fprintf('  ‚Ä¢ Tiempo total: %.2f segundos\n', max(t));
fprintf('  ‚Ä¢ Par√°metros: I=%.2f, I_z=%.2f, m=%.2f kg, h=%.3f m\n', I_sym, I_z_sym, m_sym, h_sym);

fprintf('\nTrompo Asim√©trico:\n');
fprintf('  ‚Ä¢ Puntos temporales: %d\n', length(t_asym));
fprintf('  ‚Ä¢ Tiempo total: %.2f segundos\n', max(t_asym));
fprintf('  ‚Ä¢ Masa: %.2f kg, h=%.3f m\n', m_asym, h_asym);

fprintf('\nTensor de inercia asim√©trico:\n');
disp(I_matrix_asym);

%% 3. Verificar modelo STL
fprintf('--- VERIFICACI√ìN DEL MODELO STL ---\n');
try
    piao = stlread('trompo.stl');
    fprintf('‚úì Modelo STL trompo.stl cargado exitosamente\n');
    fprintf('  ‚Ä¢ N√∫mero de caras: %d\n', size(piao.ConnectivityList, 1));
    fprintf('  ‚Ä¢ N√∫mero de v√©rtices: %d\n', size(piao.Points, 1));
    
    % Mostrar dimensiones del modelo
    x_range = [min(piao.Points(:,1)), max(piao.Points(:,1))];
    y_range = [min(piao.Points(:,2)), max(piao.Points(:,2))];
    z_range = [min(piao.Points(:,3)), max(piao.Points(:,3))];
    
    fprintf('  ‚Ä¢ Dimensiones X: [%.2f, %.2f]\n', x_range);
    fprintf('  ‚Ä¢ Dimensiones Y: [%.2f, %.2f]\n', y_range);
    fprintf('  ‚Ä¢ Dimensiones Z: [%.2f, %.2f]\n', z_range);
    
    stl_loaded = true;
catch ME
    fprintf('‚ùå Error cargando trompo.stl:\n');
    fprintf('   %s\n', ME.message);
    stl_loaded = false;
end

%% 4. Crear gr√°ficos de verificaci√≥n
fprintf('\n--- GENERANDO GR√ÅFICOS DE VERIFICACI√ìN ---\n');

% Gr√°fico 1: Comparaci√≥n de trayectorias
figure('Position', [100, 100, 1200, 600]);

subplot(2,3,1);
plot(t, rad2deg(theta_t), 'b-', 'LineWidth', 2); hold on;
plot(t_asym, rad2deg(theta_t_asym), 'r-', 'LineWidth', 2);
xlabel('Tiempo (s)'); ylabel('√Ångulo Œ∏ (¬∞)');
title('Nutaci√≥n'); legend('Sim√©trico', 'Asim√©trico');
grid on;

subplot(2,3,2);
plot(t, rad2deg(phi_t), 'b-', 'LineWidth', 2); hold on;
plot(t_asym, rad2deg(phi_t_asym), 'r-', 'LineWidth', 2);
xlabel('Tiempo (s)'); ylabel('√Ångulo œÜ (¬∞)');
title('Precesi√≥n'); legend('Sim√©trico', 'Asim√©trico');
grid on;

subplot(2,3,3);
plot(t, rad2deg(psi_t), 'b-', 'LineWidth', 2); hold on;
plot(t_asym, rad2deg(psi_t_asym), 'r-', 'LineWidth', 2);
xlabel('Tiempo (s)'); ylabel('√Ångulo œà (¬∞)');
title('Spin'); legend('Sim√©trico', 'Asim√©trico');
grid on;

subplot(2,3,4);
plot3(x_t, y_t, z_t, 'b-', 'LineWidth', 2); hold on;
plot3(x_t_asym, y_t_asym, z_t_asym, 'r-', 'LineWidth', 2);
scatter3(0, 0, 0, 100, 'k', 'filled');
xlabel('X'); ylabel('Y'); zlabel('Z');
title('Trayectorias 3D'); legend('Sim√©trico', 'Asim√©trico', 'Punto fijo');
grid on; axis equal;

subplot(2,3,5);
plot(x_t, y_t, 'b-', 'LineWidth', 2); hold on;
plot(x_t_asym, y_t_asym, 'r-', 'LineWidth', 2);
scatter(0, 0, 100, 'k', 'filled');
xlabel('X'); ylabel('Y');
title('Proyecci√≥n XY'); legend('Sim√©trico', 'Asim√©trico', 'Punto fijo');
grid on; axis equal;

subplot(2,3,6);
plot(t, psi_d_t, 'b-', 'LineWidth', 2); hold on;
plot(t_asym, psi_d_t_asym, 'r-', 'LineWidth', 2);
xlabel('Tiempo (s)'); ylabel('Velocidad œàÃá (rad/s)');
title('Velocidad de Spin'); legend('Sim√©trico', 'Asim√©trico');
grid on;

sgtitle('Verificaci√≥n de Datos - Trompo Teor√≠a de Landau', 'FontSize', 16, 'FontWeight', 'bold');

fprintf('‚úì Gr√°ficos de verificaci√≥n generados\n');

%% 5. Visualizaci√≥n del modelo STL (si est√° disponible)
if stl_loaded
    figure('Position', [200, 200, 800, 600]);
    trimesh(piao, 'FaceColor', [0.7, 0.7, 0.9], 'EdgeColor', 'none', 'FaceAlpha', 0.8);
    axis equal; grid on;
    camlight; lighting gouraud; material shiny;
    title('Modelo STL del Trompo', 'FontSize', 14, 'FontWeight', 'bold');
    xlabel('X'); ylabel('Y'); zlabel('Z');
    view(3);
    fprintf('‚úì Visualizaci√≥n del modelo STL generada\n');
end

%% 6. Resumen final
fprintf('\n=== RESUMEN DE VERIFICACI√ìN ===\n');
fprintf('‚úì Datos cargados correctamente\n');
if stl_loaded
    fprintf('‚úì Modelo STL disponible\n');
else
    fprintf('‚ö† Modelo STL no disponible\n');
end
fprintf('‚úì Gr√°ficos de verificaci√≥n generados\n');
fprintf('\nüé¨ Listo para ejecutar animaciones!\n');
fprintf('   Ejecuta: trompoAnimacionLandau.m\n');
fprintf('\nArchivos necesarios:\n');
fprintf('  ‚Ä¢ dataTrompo.mat (‚úì disponible)\n');
if stl_loaded
    fprintf('  ‚Ä¢ trompo.stl (‚úì disponible)\n');
else
    fprintf('  ‚Ä¢ trompo.stl (‚ùå no encontrado)\n');
end

%% 7. Verificar dependencias de MATLAB
fprintf('\n--- VERIFICANDO DEPENDENCIAS ---\n');

% Verificar funciones necesarias para Octave
try
    % Verificar si tenemos las funciones b√°sicas de transformaci√≥n
    eye(4); % Matriz identidad b√°sica
    fprintf('‚úì Funciones b√°sicas de matriz disponibles\n');
catch
    fprintf('‚ö† Error con funciones b√°sicas de matriz\n');
end

try
    if exist('stlread', 'file') || exist('stlread', 'builtin')
        fprintf('‚úì Funci√≥n stlread disponible\n');
    else
        fprintf('‚ö† stlread no disponible - puede necesitar paquete io o geometry\n');
        fprintf('   Instalar con: pkg install -forge io\n');
        fprintf('   Instalar con: pkg install -forge geometry\n');
    end
catch
    fprintf('‚ö† Error verificando stlread\n');
end

% En Octave, verificar si podemos crear videos b√°sicos
try
    % Octave puede no tener VideoWriter, pero puede usar otras funciones
    fprintf('‚Ñπ Para videos en Octave, considerar usar:\n');
    fprintf('   - Guardar frames como im√°genes y usar ffmpeg\n');
    fprintf('   - Usar paquete video si est√° disponible\n');
catch
    fprintf('‚ö† Capacidades de video limitadas en Octave\n');
end

fprintf('\n‚ú® Verificaci√≥n completada!\n');
